<?php
/**
 * ShippingOption
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\browse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Browse API
 *
 * <p>The Browse API has the following resources:</p>   <ul> <li><b>item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters.</li>  <li> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#API\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <b>search_by_image: </b> Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters.</li>   <li><b>item: </b> Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size. This resource also provides a bridge between the eBay legacy APIs, such as <b>Trading</b> and <b>Finding</b>, and the RESTful APIs, such as <b>Browse</b>, which use different formats for the item IDs. You can use the <b>Browse</b> API to retrieve the basic details of the item and the RESTful item ID using a legacy item ID.</li>    <li><a href=\"https://developer.ebay.com/api-docs/static/versioning.html#API\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <b>shopping_cart: </b> Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp;<b>*Note:* </b> This resource is not available in the eBay API Explorer.</li></ul>       <p>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>. The <b>shopping_cart</b> resource calls require a <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">User access token</a>.</p>
 *
 * The version of the OpenAPI document: v1_beta.19.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\browse\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\browse\ObjectSerializer;

/**
 * ShippingOption Class Doc Comment
 *
 * @category Class
 * @description The type that defines the fields for the details of a shipping provider.
 * @package  macropage\SDKs\ebay\rest\browse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ShippingOption implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShippingOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'additionalShippingCostPerUnit' => '\macropage\SDKs\ebay\rest\browse\Model\ConvertedAmount',
        'cutOffDateUsedForEstimate' => 'string',
        'maxEstimatedDeliveryDate' => 'string',
        'minEstimatedDeliveryDate' => 'string',
        'quantityUsedForEstimate' => 'int',
        'shippingCarrierCode' => 'string',
        'shippingCost' => '\macropage\SDKs\ebay\rest\browse\Model\ConvertedAmount',
        'shippingCostType' => 'string',
        'shippingServiceCode' => 'string',
        'shipToLocationUsedForEstimate' => '\macropage\SDKs\ebay\rest\browse\Model\ShipToLocation',
        'trademarkSymbol' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'additionalShippingCostPerUnit' => null,
        'cutOffDateUsedForEstimate' => null,
        'maxEstimatedDeliveryDate' => null,
        'minEstimatedDeliveryDate' => null,
        'quantityUsedForEstimate' => 'int32',
        'shippingCarrierCode' => null,
        'shippingCost' => null,
        'shippingCostType' => null,
        'shippingServiceCode' => null,
        'shipToLocationUsedForEstimate' => null,
        'trademarkSymbol' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additionalShippingCostPerUnit' => 'additionalShippingCostPerUnit',
        'cutOffDateUsedForEstimate' => 'cutOffDateUsedForEstimate',
        'maxEstimatedDeliveryDate' => 'maxEstimatedDeliveryDate',
        'minEstimatedDeliveryDate' => 'minEstimatedDeliveryDate',
        'quantityUsedForEstimate' => 'quantityUsedForEstimate',
        'shippingCarrierCode' => 'shippingCarrierCode',
        'shippingCost' => 'shippingCost',
        'shippingCostType' => 'shippingCostType',
        'shippingServiceCode' => 'shippingServiceCode',
        'shipToLocationUsedForEstimate' => 'shipToLocationUsedForEstimate',
        'trademarkSymbol' => 'trademarkSymbol',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additionalShippingCostPerUnit' => 'setAdditionalShippingCostPerUnit',
        'cutOffDateUsedForEstimate' => 'setCutOffDateUsedForEstimate',
        'maxEstimatedDeliveryDate' => 'setMaxEstimatedDeliveryDate',
        'minEstimatedDeliveryDate' => 'setMinEstimatedDeliveryDate',
        'quantityUsedForEstimate' => 'setQuantityUsedForEstimate',
        'shippingCarrierCode' => 'setShippingCarrierCode',
        'shippingCost' => 'setShippingCost',
        'shippingCostType' => 'setShippingCostType',
        'shippingServiceCode' => 'setShippingServiceCode',
        'shipToLocationUsedForEstimate' => 'setShipToLocationUsedForEstimate',
        'trademarkSymbol' => 'setTrademarkSymbol',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additionalShippingCostPerUnit' => 'getAdditionalShippingCostPerUnit',
        'cutOffDateUsedForEstimate' => 'getCutOffDateUsedForEstimate',
        'maxEstimatedDeliveryDate' => 'getMaxEstimatedDeliveryDate',
        'minEstimatedDeliveryDate' => 'getMinEstimatedDeliveryDate',
        'quantityUsedForEstimate' => 'getQuantityUsedForEstimate',
        'shippingCarrierCode' => 'getShippingCarrierCode',
        'shippingCost' => 'getShippingCost',
        'shippingCostType' => 'getShippingCostType',
        'shippingServiceCode' => 'getShippingServiceCode',
        'shipToLocationUsedForEstimate' => 'getShipToLocationUsedForEstimate',
        'trademarkSymbol' => 'getTrademarkSymbol',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additionalShippingCostPerUnit'] = isset($data['additionalShippingCostPerUnit']) ? $data['additionalShippingCostPerUnit'] : null;
        $this->container['cutOffDateUsedForEstimate'] = isset($data['cutOffDateUsedForEstimate']) ? $data['cutOffDateUsedForEstimate'] : null;
        $this->container['maxEstimatedDeliveryDate'] = isset($data['maxEstimatedDeliveryDate']) ? $data['maxEstimatedDeliveryDate'] : null;
        $this->container['minEstimatedDeliveryDate'] = isset($data['minEstimatedDeliveryDate']) ? $data['minEstimatedDeliveryDate'] : null;
        $this->container['quantityUsedForEstimate'] = isset($data['quantityUsedForEstimate']) ? $data['quantityUsedForEstimate'] : null;
        $this->container['shippingCarrierCode'] = isset($data['shippingCarrierCode']) ? $data['shippingCarrierCode'] : null;
        $this->container['shippingCost'] = isset($data['shippingCost']) ? $data['shippingCost'] : null;
        $this->container['shippingCostType'] = isset($data['shippingCostType']) ? $data['shippingCostType'] : null;
        $this->container['shippingServiceCode'] = isset($data['shippingServiceCode']) ? $data['shippingServiceCode'] : null;
        $this->container['shipToLocationUsedForEstimate'] = isset($data['shipToLocationUsedForEstimate']) ? $data['shipToLocationUsedForEstimate'] : null;
        $this->container['trademarkSymbol'] = isset($data['trademarkSymbol']) ? $data['trademarkSymbol'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additionalShippingCostPerUnit
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\ConvertedAmount|null
     */
    public function getAdditionalShippingCostPerUnit()
    {
        return $this->container['additionalShippingCostPerUnit'];
    }

    /**
     * Sets additionalShippingCostPerUnit
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\ConvertedAmount|null $additionalShippingCostPerUnit additionalShippingCostPerUnit
     *
     * @return $this
     */
    public function setAdditionalShippingCostPerUnit($additionalShippingCostPerUnit)
    {
        $this->container['additionalShippingCostPerUnit'] = $additionalShippingCostPerUnit;

        return $this;
    }

    /**
     * Gets cutOffDateUsedForEstimate
     *
     * @return string|null
     */
    public function getCutOffDateUsedForEstimate()
    {
        return $this->container['cutOffDateUsedForEstimate'];
    }

    /**
     * Sets cutOffDateUsedForEstimate
     *
     * @param string|null $cutOffDateUsedForEstimate The deadline date that the item must be purchased by in order to be received by the buyer within the delivery window ( maxEstimatedDeliveryDate and minEstimatedDeliveryDate fields). This field is returned only for items that are eligible for 'Same Day Handling'. For these items, the value of this field is what is displayed in the Delivery line on the View Item page. This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer.
     *
     * @return $this
     */
    public function setCutOffDateUsedForEstimate($cutOffDateUsedForEstimate)
    {
        $this->container['cutOffDateUsedForEstimate'] = $cutOffDateUsedForEstimate;

        return $this;
    }

    /**
     * Gets maxEstimatedDeliveryDate
     *
     * @return string|null
     */
    public function getMaxEstimatedDeliveryDate()
    {
        return $this->container['maxEstimatedDeliveryDate'];
    }

    /**
     * Sets maxEstimatedDeliveryDate
     *
     * @param string|null $maxEstimatedDeliveryDate The end date of the delivery window (latest projected delivery date). This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: For the best accuracy, always include the location of where the item is be shipped in the contextualLocation values of the X-EBAY-C-ENDUSERCTX request header.
     *
     * @return $this
     */
    public function setMaxEstimatedDeliveryDate($maxEstimatedDeliveryDate)
    {
        $this->container['maxEstimatedDeliveryDate'] = $maxEstimatedDeliveryDate;

        return $this;
    }

    /**
     * Gets minEstimatedDeliveryDate
     *
     * @return string|null
     */
    public function getMinEstimatedDeliveryDate()
    {
        return $this->container['minEstimatedDeliveryDate'];
    }

    /**
     * Sets minEstimatedDeliveryDate
     *
     * @param string|null $minEstimatedDeliveryDate The start date of the delivery window (earliest projected delivery date). This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: For the best accuracy, always include the location of where the item is be shipped in the contextualLocation values of the X-EBAY-C-ENDUSERCTX request header.
     *
     * @return $this
     */
    public function setMinEstimatedDeliveryDate($minEstimatedDeliveryDate)
    {
        $this->container['minEstimatedDeliveryDate'] = $minEstimatedDeliveryDate;

        return $this;
    }

    /**
     * Gets quantityUsedForEstimate
     *
     * @return int|null
     */
    public function getQuantityUsedForEstimate()
    {
        return $this->container['quantityUsedForEstimate'];
    }

    /**
     * Sets quantityUsedForEstimate
     *
     * @param int|null $quantityUsedForEstimate The number of items used when calculating the estimation information.
     *
     * @return $this
     */
    public function setQuantityUsedForEstimate($quantityUsedForEstimate)
    {
        $this->container['quantityUsedForEstimate'] = $quantityUsedForEstimate;

        return $this;
    }

    /**
     * Gets shippingCarrierCode
     *
     * @return string|null
     */
    public function getShippingCarrierCode()
    {
        return $this->container['shippingCarrierCode'];
    }

    /**
     * Sets shippingCarrierCode
     *
     * @param string|null $shippingCarrierCode A name of the shipping provider, such as FedEx, or USPS.
     *
     * @return $this
     */
    public function setShippingCarrierCode($shippingCarrierCode)
    {
        $this->container['shippingCarrierCode'] = $shippingCarrierCode;

        return $this;
    }

    /**
     * Gets shippingCost
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\ConvertedAmount|null
     */
    public function getShippingCost()
    {
        return $this->container['shippingCost'];
    }

    /**
     * Sets shippingCost
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\ConvertedAmount|null $shippingCost shippingCost
     *
     * @return $this
     */
    public function setShippingCost($shippingCost)
    {
        $this->container['shippingCost'] = $shippingCost;

        return $this;
    }

    /**
     * Gets shippingCostType
     *
     * @return string|null
     */
    public function getShippingCostType()
    {
        return $this->container['shippingCostType'];
    }

    /**
     * Sets shippingCostType
     *
     * @param string|null $shippingCostType Indicates the class of the shipping cost. Valid Values: FIXED or CALCULATED. Code so that your app gracefully handles any future changes to this list.
     *
     * @return $this
     */
    public function setShippingCostType($shippingCostType)
    {
        $this->container['shippingCostType'] = $shippingCostType;

        return $this;
    }

    /**
     * Gets shippingServiceCode
     *
     * @return string|null
     */
    public function getShippingServiceCode()
    {
        return $this->container['shippingServiceCode'];
    }

    /**
     * Sets shippingServiceCode
     *
     * @param string|null $shippingServiceCode The type of shipping service. For example, USPS First Class.
     *
     * @return $this
     */
    public function setShippingServiceCode($shippingServiceCode)
    {
        $this->container['shippingServiceCode'] = $shippingServiceCode;

        return $this;
    }

    /**
     * Gets shipToLocationUsedForEstimate
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\ShipToLocation|null
     */
    public function getShipToLocationUsedForEstimate()
    {
        return $this->container['shipToLocationUsedForEstimate'];
    }

    /**
     * Sets shipToLocationUsedForEstimate
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\ShipToLocation|null $shipToLocationUsedForEstimate shipToLocationUsedForEstimate
     *
     * @return $this
     */
    public function setShipToLocationUsedForEstimate($shipToLocationUsedForEstimate)
    {
        $this->container['shipToLocationUsedForEstimate'] = $shipToLocationUsedForEstimate;

        return $this;
    }

    /**
     * Gets trademarkSymbol
     *
     * @return string|null
     */
    public function getTrademarkSymbol()
    {
        return $this->container['trademarkSymbol'];
    }

    /**
     * Sets trademarkSymbol
     *
     * @param string|null $trademarkSymbol Any trademark symbol, such as &trade; or &reg;, that needs to be shown in superscript next to the shipping service name.
     *
     * @return $this
     */
    public function setTrademarkSymbol($trademarkSymbol)
    {
        $this->container['trademarkSymbol'] = $trademarkSymbol;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of a shipping option, such as EXPEDITED, ONE_DAY, STANDARD, ECONOMY, PICKUP, etc.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


