<?php
/**
 * ItemSummary
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\browse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Browse API
 *
 * <p>The Browse API has the following resources:</p>   <ul> <li><b>item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters.</li>  <li> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#API\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <b>search_by_image: </b> Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters.</li>   <li><b>item: </b> Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size. This resource also provides a bridge between the eBay legacy APIs, such as <b>Trading</b> and <b>Finding</b>, and the RESTful APIs, such as <b>Browse</b>, which use different formats for the item IDs. You can use the <b>Browse</b> API to retrieve the basic details of the item and the RESTful item ID using a legacy item ID.</li>    <li><a href=\"https://developer.ebay.com/api-docs/static/versioning.html#API\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <b>shopping_cart: </b> Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp;<b>*Note:* </b> This resource is not available in the eBay API Explorer.</li></ul>       <p>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>. The <b>shopping_cart</b> resource calls require a <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">User access token</a>.</p>
 *
 * The version of the OpenAPI document: v1_beta.19.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\browse\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\browse\ObjectSerializer;

/**
 * ItemSummary Class Doc Comment
 *
 * @category Class
 * @description The type that defines the item details for a specific item.
 * @package  macropage\SDKs\ebay\rest\browse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ItemSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'additionalImages' => '\macropage\SDKs\ebay\rest\browse\Model\Image[]',
        'adultOnly' => 'bool',
        'bidCount' => 'int',
        'buyingOptions' => 'string[]',
        'categories' => '\macropage\SDKs\ebay\rest\browse\Model\Category[]',
        'condition' => 'string',
        'conditionId' => 'string',
        'currentBidPrice' => '\macropage\SDKs\ebay\rest\browse\Model\ConvertedAmount',
        'distanceFromPickupLocation' => '\macropage\SDKs\ebay\rest\browse\Model\TargetLocation',
        'energyEfficiencyClass' => 'string',
        'epid' => 'string',
        'image' => '\macropage\SDKs\ebay\rest\browse\Model\Image',
        'itemAffiliateWebUrl' => 'string',
        'itemGroupHref' => 'string',
        'itemGroupType' => 'string',
        'itemHref' => 'string',
        'itemId' => 'string',
        'itemLocation' => '\macropage\SDKs\ebay\rest\browse\Model\ItemLocationImpl',
        'itemWebUrl' => 'string',
        'marketingPrice' => '\macropage\SDKs\ebay\rest\browse\Model\MarketingPrice',
        'pickupOptions' => '\macropage\SDKs\ebay\rest\browse\Model\PickupOptionSummary[]',
        'price' => '\macropage\SDKs\ebay\rest\browse\Model\ConvertedAmount',
        'seller' => '\macropage\SDKs\ebay\rest\browse\Model\Seller',
        'shippingOptions' => '\macropage\SDKs\ebay\rest\browse\Model\ShippingOptionSummary[]',
        'shortDescription' => 'string',
        'thumbnailImages' => '\macropage\SDKs\ebay\rest\browse\Model\Image[]',
        'title' => 'string',
        'unitPrice' => '\macropage\SDKs\ebay\rest\browse\Model\ConvertedAmount',
        'unitPricingMeasure' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'additionalImages' => null,
        'adultOnly' => null,
        'bidCount' => 'int32',
        'buyingOptions' => null,
        'categories' => null,
        'condition' => null,
        'conditionId' => null,
        'currentBidPrice' => null,
        'distanceFromPickupLocation' => null,
        'energyEfficiencyClass' => null,
        'epid' => null,
        'image' => null,
        'itemAffiliateWebUrl' => null,
        'itemGroupHref' => null,
        'itemGroupType' => null,
        'itemHref' => null,
        'itemId' => null,
        'itemLocation' => null,
        'itemWebUrl' => null,
        'marketingPrice' => null,
        'pickupOptions' => null,
        'price' => null,
        'seller' => null,
        'shippingOptions' => null,
        'shortDescription' => null,
        'thumbnailImages' => null,
        'title' => null,
        'unitPrice' => null,
        'unitPricingMeasure' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additionalImages' => 'additionalImages',
        'adultOnly' => 'adultOnly',
        'bidCount' => 'bidCount',
        'buyingOptions' => 'buyingOptions',
        'categories' => 'categories',
        'condition' => 'condition',
        'conditionId' => 'conditionId',
        'currentBidPrice' => 'currentBidPrice',
        'distanceFromPickupLocation' => 'distanceFromPickupLocation',
        'energyEfficiencyClass' => 'energyEfficiencyClass',
        'epid' => 'epid',
        'image' => 'image',
        'itemAffiliateWebUrl' => 'itemAffiliateWebUrl',
        'itemGroupHref' => 'itemGroupHref',
        'itemGroupType' => 'itemGroupType',
        'itemHref' => 'itemHref',
        'itemId' => 'itemId',
        'itemLocation' => 'itemLocation',
        'itemWebUrl' => 'itemWebUrl',
        'marketingPrice' => 'marketingPrice',
        'pickupOptions' => 'pickupOptions',
        'price' => 'price',
        'seller' => 'seller',
        'shippingOptions' => 'shippingOptions',
        'shortDescription' => 'shortDescription',
        'thumbnailImages' => 'thumbnailImages',
        'title' => 'title',
        'unitPrice' => 'unitPrice',
        'unitPricingMeasure' => 'unitPricingMeasure'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additionalImages' => 'setAdditionalImages',
        'adultOnly' => 'setAdultOnly',
        'bidCount' => 'setBidCount',
        'buyingOptions' => 'setBuyingOptions',
        'categories' => 'setCategories',
        'condition' => 'setCondition',
        'conditionId' => 'setConditionId',
        'currentBidPrice' => 'setCurrentBidPrice',
        'distanceFromPickupLocation' => 'setDistanceFromPickupLocation',
        'energyEfficiencyClass' => 'setEnergyEfficiencyClass',
        'epid' => 'setEpid',
        'image' => 'setImage',
        'itemAffiliateWebUrl' => 'setItemAffiliateWebUrl',
        'itemGroupHref' => 'setItemGroupHref',
        'itemGroupType' => 'setItemGroupType',
        'itemHref' => 'setItemHref',
        'itemId' => 'setItemId',
        'itemLocation' => 'setItemLocation',
        'itemWebUrl' => 'setItemWebUrl',
        'marketingPrice' => 'setMarketingPrice',
        'pickupOptions' => 'setPickupOptions',
        'price' => 'setPrice',
        'seller' => 'setSeller',
        'shippingOptions' => 'setShippingOptions',
        'shortDescription' => 'setShortDescription',
        'thumbnailImages' => 'setThumbnailImages',
        'title' => 'setTitle',
        'unitPrice' => 'setUnitPrice',
        'unitPricingMeasure' => 'setUnitPricingMeasure'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additionalImages' => 'getAdditionalImages',
        'adultOnly' => 'getAdultOnly',
        'bidCount' => 'getBidCount',
        'buyingOptions' => 'getBuyingOptions',
        'categories' => 'getCategories',
        'condition' => 'getCondition',
        'conditionId' => 'getConditionId',
        'currentBidPrice' => 'getCurrentBidPrice',
        'distanceFromPickupLocation' => 'getDistanceFromPickupLocation',
        'energyEfficiencyClass' => 'getEnergyEfficiencyClass',
        'epid' => 'getEpid',
        'image' => 'getImage',
        'itemAffiliateWebUrl' => 'getItemAffiliateWebUrl',
        'itemGroupHref' => 'getItemGroupHref',
        'itemGroupType' => 'getItemGroupType',
        'itemHref' => 'getItemHref',
        'itemId' => 'getItemId',
        'itemLocation' => 'getItemLocation',
        'itemWebUrl' => 'getItemWebUrl',
        'marketingPrice' => 'getMarketingPrice',
        'pickupOptions' => 'getPickupOptions',
        'price' => 'getPrice',
        'seller' => 'getSeller',
        'shippingOptions' => 'getShippingOptions',
        'shortDescription' => 'getShortDescription',
        'thumbnailImages' => 'getThumbnailImages',
        'title' => 'getTitle',
        'unitPrice' => 'getUnitPrice',
        'unitPricingMeasure' => 'getUnitPricingMeasure'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additionalImages'] = isset($data['additionalImages']) ? $data['additionalImages'] : null;
        $this->container['adultOnly'] = isset($data['adultOnly']) ? $data['adultOnly'] : null;
        $this->container['bidCount'] = isset($data['bidCount']) ? $data['bidCount'] : null;
        $this->container['buyingOptions'] = isset($data['buyingOptions']) ? $data['buyingOptions'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['conditionId'] = isset($data['conditionId']) ? $data['conditionId'] : null;
        $this->container['currentBidPrice'] = isset($data['currentBidPrice']) ? $data['currentBidPrice'] : null;
        $this->container['distanceFromPickupLocation'] = isset($data['distanceFromPickupLocation']) ? $data['distanceFromPickupLocation'] : null;
        $this->container['energyEfficiencyClass'] = isset($data['energyEfficiencyClass']) ? $data['energyEfficiencyClass'] : null;
        $this->container['epid'] = isset($data['epid']) ? $data['epid'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['itemAffiliateWebUrl'] = isset($data['itemAffiliateWebUrl']) ? $data['itemAffiliateWebUrl'] : null;
        $this->container['itemGroupHref'] = isset($data['itemGroupHref']) ? $data['itemGroupHref'] : null;
        $this->container['itemGroupType'] = isset($data['itemGroupType']) ? $data['itemGroupType'] : null;
        $this->container['itemHref'] = isset($data['itemHref']) ? $data['itemHref'] : null;
        $this->container['itemId'] = isset($data['itemId']) ? $data['itemId'] : null;
        $this->container['itemLocation'] = isset($data['itemLocation']) ? $data['itemLocation'] : null;
        $this->container['itemWebUrl'] = isset($data['itemWebUrl']) ? $data['itemWebUrl'] : null;
        $this->container['marketingPrice'] = isset($data['marketingPrice']) ? $data['marketingPrice'] : null;
        $this->container['pickupOptions'] = isset($data['pickupOptions']) ? $data['pickupOptions'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['seller'] = isset($data['seller']) ? $data['seller'] : null;
        $this->container['shippingOptions'] = isset($data['shippingOptions']) ? $data['shippingOptions'] : null;
        $this->container['shortDescription'] = isset($data['shortDescription']) ? $data['shortDescription'] : null;
        $this->container['thumbnailImages'] = isset($data['thumbnailImages']) ? $data['thumbnailImages'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['unitPrice'] = isset($data['unitPrice']) ? $data['unitPrice'] : null;
        $this->container['unitPricingMeasure'] = isset($data['unitPricingMeasure']) ? $data['unitPricingMeasure'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additionalImages
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\Image[]|null
     */
    public function getAdditionalImages()
    {
        return $this->container['additionalImages'];
    }

    /**
     * Sets additionalImages
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\Image[]|null $additionalImages An array of containers with the URLs for the images that are in addition to the primary image. The primary image is returned in the image.imageUrl field.
     *
     * @return $this
     */
    public function setAdditionalImages($additionalImages)
    {
        $this->container['additionalImages'] = $additionalImages;

        return $this;
    }

    /**
     * Gets adultOnly
     *
     * @return bool|null
     */
    public function getAdultOnly()
    {
        return $this->container['adultOnly'];
    }

    /**
     * Sets adultOnly
     *
     * @param bool|null $adultOnly This indicates if the item is for adults only. For more information about adult-only items on eBay, see Adult items policy for sellers and Adult-Only items on eBay for buyers.
     *
     * @return $this
     */
    public function setAdultOnly($adultOnly)
    {
        $this->container['adultOnly'] = $adultOnly;

        return $this;
    }

    /**
     * Gets bidCount
     *
     * @return int|null
     */
    public function getBidCount()
    {
        return $this->container['bidCount'];
    }

    /**
     * Sets bidCount
     *
     * @param int|null $bidCount This integer value indicates the total number of bids that have been placed for an auction item. This field is only returned for auction items.
     *
     * @return $this
     */
    public function setBidCount($bidCount)
    {
        $this->container['bidCount'] = $bidCount;

        return $this;
    }

    /**
     * Gets buyingOptions
     *
     * @return string[]|null
     */
    public function getBuyingOptions()
    {
        return $this->container['buyingOptions'];
    }

    /**
     * Sets buyingOptions
     *
     * @param string[]|null $buyingOptions A comma separated list of the purchase options available for the item, such as FIXED_PRICE, AUCTION. FIXED_PRICE - Returned for fixed-price items (non-auction) AUCTION - Returned for auction items without Buy It Now feature FIXED_PRICE and AUCTION - Returned for auction items enabled with the Buy It Now feature Code so that your app gracefully handles any future changes to this list.
     *
     * @return $this
     */
    public function setBuyingOptions($buyingOptions)
    {
        $this->container['buyingOptions'] = $buyingOptions;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\Category[]|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\Category[]|null $categories This container returns the primary category ID of the item (as well as the secondary category if the item was listed in two categories).
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string|null
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string|null $condition The text describing the condition of the item, such as New or Used. For a list of condition names, see Item Condition IDs and Names. Code so that your app gracefully handles any future changes to this list.
     *
     * @return $this
     */
    public function setCondition($condition)
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets conditionId
     *
     * @return string|null
     */
    public function getConditionId()
    {
        return $this->container['conditionId'];
    }

    /**
     * Sets conditionId
     *
     * @param string|null $conditionId The identifier of the condition of the item. For example, 1000 is the identifier for NEW. For a list of condition names and IDs, see Item Condition IDs and Names. Code so that your app gracefully handles any future changes to this list.
     *
     * @return $this
     */
    public function setConditionId($conditionId)
    {
        $this->container['conditionId'] = $conditionId;

        return $this;
    }

    /**
     * Gets currentBidPrice
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\ConvertedAmount|null
     */
    public function getCurrentBidPrice()
    {
        return $this->container['currentBidPrice'];
    }

    /**
     * Sets currentBidPrice
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\ConvertedAmount|null $currentBidPrice currentBidPrice
     *
     * @return $this
     */
    public function setCurrentBidPrice($currentBidPrice)
    {
        $this->container['currentBidPrice'] = $currentBidPrice;

        return $this;
    }

    /**
     * Gets distanceFromPickupLocation
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\TargetLocation|null
     */
    public function getDistanceFromPickupLocation()
    {
        return $this->container['distanceFromPickupLocation'];
    }

    /**
     * Sets distanceFromPickupLocation
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\TargetLocation|null $distanceFromPickupLocation distanceFromPickupLocation
     *
     * @return $this
     */
    public function setDistanceFromPickupLocation($distanceFromPickupLocation)
    {
        $this->container['distanceFromPickupLocation'] = $distanceFromPickupLocation;

        return $this;
    }

    /**
     * Gets energyEfficiencyClass
     *
     * @return string|null
     */
    public function getEnergyEfficiencyClass()
    {
        return $this->container['energyEfficiencyClass'];
    }

    /**
     * Sets energyEfficiencyClass
     *
     * @param string|null $energyEfficiencyClass This indicates the energy efficiency rating of the item. Energy efficiency ratings apply to products listed by commercial vendors in electronics categories only. Currently, this field is only applicable for the Germany site, and is only returned if the seller specified the energy efficiency rating through item specifics at listing time. Rating values include A+++, A++, A+, A, B, C, D, E, F, and G.
     *
     * @return $this
     */
    public function setEnergyEfficiencyClass($energyEfficiencyClass)
    {
        $this->container['energyEfficiencyClass'] = $energyEfficiencyClass;

        return $this;
    }

    /**
     * Gets epid
     *
     * @return string|null
     */
    public function getEpid()
    {
        return $this->container['epid'];
    }

    /**
     * Sets epid
     *
     * @param string|null $epid An ePID is the eBay product identifier of a product from the eBay product catalog. This indicates the product in which the item belongs.
     *
     * @return $this
     */
    public function setEpid($epid)
    {
        $this->container['epid'] = $epid;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\Image|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\Image|null $image image
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets itemAffiliateWebUrl
     *
     * @return string|null
     */
    public function getItemAffiliateWebUrl()
    {
        return $this->container['itemAffiliateWebUrl'];
    }

    /**
     * Sets itemAffiliateWebUrl
     *
     * @param string|null $itemAffiliateWebUrl The URL to the View Item page of the item, which includes the affiliate tracking ID. This field is only returned if the seller enables affiliate tracking for the item by including the X-EBAY-C-ENDUSERCTX request header in the method.
     *
     * @return $this
     */
    public function setItemAffiliateWebUrl($itemAffiliateWebUrl)
    {
        $this->container['itemAffiliateWebUrl'] = $itemAffiliateWebUrl;

        return $this;
    }

    /**
     * Gets itemGroupHref
     *
     * @return string|null
     */
    public function getItemGroupHref()
    {
        return $this->container['itemGroupHref'];
    }

    /**
     * Sets itemGroupHref
     *
     * @param string|null $itemGroupHref The HATEOAS reference of the parent page of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. Note: This field is returned only for item groups.
     *
     * @return $this
     */
    public function setItemGroupHref($itemGroupHref)
    {
        $this->container['itemGroupHref'] = $itemGroupHref;

        return $this;
    }

    /**
     * Gets itemGroupType
     *
     * @return string|null
     */
    public function getItemGroupType()
    {
        return $this->container['itemGroupType'];
    }

    /**
     * Sets itemGroupType
     *
     * @param string|null $itemGroupType The indicates the item group type. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. Currently only SELLER_DEFINED_VARIATIONS is supported and indicates this is an item group created by the seller. Note: This field is returned only for item groups. Code so that your app gracefully handles any future changes to this list.
     *
     * @return $this
     */
    public function setItemGroupType($itemGroupType)
    {
        $this->container['itemGroupType'] = $itemGroupType;

        return $this;
    }

    /**
     * Gets itemHref
     *
     * @return string|null
     */
    public function getItemHref()
    {
        return $this->container['itemHref'];
    }

    /**
     * Sets itemHref
     *
     * @param string|null $itemHref The URI for the Browse API getItem method, which can be used to retrieve more details about items in the search results.
     *
     * @return $this
     */
    public function setItemHref($itemHref)
    {
        $this->container['itemHref'] = $itemHref;

        return $this;
    }

    /**
     * Gets itemId
     *
     * @return string|null
     */
    public function getItemId()
    {
        return $this->container['itemId'];
    }

    /**
     * Sets itemId
     *
     * @param string|null $itemId The unique RESTful identifier of the item.
     *
     * @return $this
     */
    public function setItemId($itemId)
    {
        $this->container['itemId'] = $itemId;

        return $this;
    }

    /**
     * Gets itemLocation
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\ItemLocationImpl|null
     */
    public function getItemLocation()
    {
        return $this->container['itemLocation'];
    }

    /**
     * Sets itemLocation
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\ItemLocationImpl|null $itemLocation itemLocation
     *
     * @return $this
     */
    public function setItemLocation($itemLocation)
    {
        $this->container['itemLocation'] = $itemLocation;

        return $this;
    }

    /**
     * Gets itemWebUrl
     *
     * @return string|null
     */
    public function getItemWebUrl()
    {
        return $this->container['itemWebUrl'];
    }

    /**
     * Sets itemWebUrl
     *
     * @param string|null $itemWebUrl The URL to the View Item page of the item. This enables you to include a &quot;Report Item on eBay&quot; hyperlink that takes the buyer to the View Item page on eBay. From there they can report any issues regarding this item to eBay.
     *
     * @return $this
     */
    public function setItemWebUrl($itemWebUrl)
    {
        $this->container['itemWebUrl'] = $itemWebUrl;

        return $this;
    }

    /**
     * Gets marketingPrice
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\MarketingPrice|null
     */
    public function getMarketingPrice()
    {
        return $this->container['marketingPrice'];
    }

    /**
     * Sets marketingPrice
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\MarketingPrice|null $marketingPrice marketingPrice
     *
     * @return $this
     */
    public function setMarketingPrice($marketingPrice)
    {
        $this->container['marketingPrice'] = $marketingPrice;

        return $this;
    }

    /**
     * Gets pickupOptions
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\PickupOptionSummary[]|null
     */
    public function getPickupOptions()
    {
        return $this->container['pickupOptions'];
    }

    /**
     * Sets pickupOptions
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\PickupOptionSummary[]|null $pickupOptions This container returns the local pickup options available to the buyer. This container is only returned if the user is searching for local pickup items and set the local pickup filters in the method request.
     *
     * @return $this
     */
    public function setPickupOptions($pickupOptions)
    {
        $this->container['pickupOptions'] = $pickupOptions;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\ConvertedAmount|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\ConvertedAmount|null $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets seller
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\Seller|null
     */
    public function getSeller()
    {
        return $this->container['seller'];
    }

    /**
     * Sets seller
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\Seller|null $seller seller
     *
     * @return $this
     */
    public function setSeller($seller)
    {
        $this->container['seller'] = $seller;

        return $this;
    }

    /**
     * Gets shippingOptions
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\ShippingOptionSummary[]|null
     */
    public function getShippingOptions()
    {
        return $this->container['shippingOptions'];
    }

    /**
     * Sets shippingOptions
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\ShippingOptionSummary[]|null $shippingOptions This container returns the shipping options available to ship the item.
     *
     * @return $this
     */
    public function setShippingOptions($shippingOptions)
    {
        $this->container['shippingOptions'] = $shippingOptions;

        return $this;
    }

    /**
     * Gets shortDescription
     *
     * @return string|null
     */
    public function getShortDescription()
    {
        return $this->container['shortDescription'];
    }

    /**
     * Sets shortDescription
     *
     * @param string|null $shortDescription This text string is derived from the item condition and the item aspects (such as size, color, capacity, model, brand, etc.). Sometimes the title doesn't give enough information but the description is too big. Surfacing the shortDescription can often provide buyers with the additional information that could help them make a buying decision. For example: &quot;title&quot;: &quot;Petrel U42W FPV Drone RC Quadcopter w/HD Camera Live Video One Key Off / Landing&quot;, &quot;shortDescription&quot;: &quot;1 U42W Quadcopter. Syma X5SW-V3 Wifi FPV RC Drone Quadcopter 2.4Ghz 6-Axis Gyro with Headless Mode. Syma X20 Pocket Drone 2.4Ghz Mini RC Quadcopter Headless Mode Altitude Hold. One Key Take Off / Landing function: allow beginner to easy to fly the drone without any skill.&quot;, Restriction: This field is returned by the search method only when fieldgroups = EXTENDED.
     *
     * @return $this
     */
    public function setShortDescription($shortDescription)
    {
        $this->container['shortDescription'] = $shortDescription;

        return $this;
    }

    /**
     * Gets thumbnailImages
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\Image[]|null
     */
    public function getThumbnailImages()
    {
        return $this->container['thumbnailImages'];
    }

    /**
     * Sets thumbnailImages
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\Image[]|null $thumbnailImages An array of thumbnail images for the item.
     *
     * @return $this
     */
    public function setThumbnailImages($thumbnailImages)
    {
        $this->container['thumbnailImages'] = $thumbnailImages;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The seller-created title of the item. Maximum Length: 80 characters
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets unitPrice
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\ConvertedAmount|null
     */
    public function getUnitPrice()
    {
        return $this->container['unitPrice'];
    }

    /**
     * Sets unitPrice
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\ConvertedAmount|null $unitPrice unitPrice
     *
     * @return $this
     */
    public function setUnitPrice($unitPrice)
    {
        $this->container['unitPrice'] = $unitPrice;

        return $this;
    }

    /**
     * Gets unitPricingMeasure
     *
     * @return string|null
     */
    public function getUnitPricingMeasure()
    {
        return $this->container['unitPricingMeasure'];
    }

    /**
     * Sets unitPricingMeasure
     *
     * @param string|null $unitPricingMeasure The designation, such as size, weight, volume, count, etc., that was used to specify the quantity of the item. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &quot;unitPricingMeasure&quot;: &quot;100g&quot;, &quot;unitPrice&quot;: { &nbsp;&nbsp;&quot;value&quot;: &quot;7.99&quot;, &nbsp;&nbsp;&quot;currency&quot;: &quot;GBP&quot;
     *
     * @return $this
     */
    public function setUnitPricingMeasure($unitPricingMeasure)
    {
        $this->container['unitPricingMeasure'] = $unitPricingMeasure;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


