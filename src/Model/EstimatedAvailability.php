<?php
/**
 * EstimatedAvailability
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\browse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Browse API
 *
 * <p>The Browse API has the following resources:</p>   <ul> <li><b>item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters.</li>  <li> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#API\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <b>search_by_image: </b> Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters.</li>   <li><b>item: </b> Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size. This resource also provides a bridge between the eBay legacy APIs, such as <b>Trading</b> and <b>Finding</b>, and the RESTful APIs, such as <b>Browse</b>, which use different formats for the item IDs. You can use the <b>Browse</b> API to retrieve the basic details of the item and the RESTful item ID using a legacy item ID.</li>    <li><a href=\"https://developer.ebay.com/api-docs/static/versioning.html#API\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <b>shopping_cart: </b> Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp;<b>*Note:* </b> This resource is not available in the eBay API Explorer.</li></ul>       <p>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>. The <b>shopping_cart</b> resource calls require a <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">User access token</a>.</p>
 *
 * The version of the OpenAPI document: v1_beta.19.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\browse\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\browse\ObjectSerializer;

/**
 * EstimatedAvailability Class Doc Comment
 *
 * @category Class
 * @description The type that defines the fields for the estimated item availability information.
 * @package  macropage\SDKs\ebay\rest\browse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EstimatedAvailability implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EstimatedAvailability';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'availabilityThreshold' => 'int',
        'availabilityThresholdType' => '\macropage\SDKs\ebay\rest\browse\Model\AvailabilityThresholdEnum',
        'deliveryOptions' => '\macropage\SDKs\ebay\rest\browse\Model\DeliveryOptionsEnum[]',
        'estimatedAvailabilityStatus' => '\macropage\SDKs\ebay\rest\browse\Model\AvailabilityStatusEnum',
        'estimatedAvailableQuantity' => 'int',
        'estimatedSoldQuantity' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'availabilityThreshold' => 'int32',
        'availabilityThresholdType' => null,
        'deliveryOptions' => null,
        'estimatedAvailabilityStatus' => null,
        'estimatedAvailableQuantity' => 'int32',
        'estimatedSoldQuantity' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'availabilityThreshold' => 'availabilityThreshold',
        'availabilityThresholdType' => 'availabilityThresholdType',
        'deliveryOptions' => 'deliveryOptions',
        'estimatedAvailabilityStatus' => 'estimatedAvailabilityStatus',
        'estimatedAvailableQuantity' => 'estimatedAvailableQuantity',
        'estimatedSoldQuantity' => 'estimatedSoldQuantity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'availabilityThreshold' => 'setAvailabilityThreshold',
        'availabilityThresholdType' => 'setAvailabilityThresholdType',
        'deliveryOptions' => 'setDeliveryOptions',
        'estimatedAvailabilityStatus' => 'setEstimatedAvailabilityStatus',
        'estimatedAvailableQuantity' => 'setEstimatedAvailableQuantity',
        'estimatedSoldQuantity' => 'setEstimatedSoldQuantity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'availabilityThreshold' => 'getAvailabilityThreshold',
        'availabilityThresholdType' => 'getAvailabilityThresholdType',
        'deliveryOptions' => 'getDeliveryOptions',
        'estimatedAvailabilityStatus' => 'getEstimatedAvailabilityStatus',
        'estimatedAvailableQuantity' => 'getEstimatedAvailableQuantity',
        'estimatedSoldQuantity' => 'getEstimatedSoldQuantity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['availabilityThreshold'] = isset($data['availabilityThreshold']) ? $data['availabilityThreshold'] : null;
        $this->container['availabilityThresholdType'] = isset($data['availabilityThresholdType']) ? $data['availabilityThresholdType'] : null;
        $this->container['deliveryOptions'] = isset($data['deliveryOptions']) ? $data['deliveryOptions'] : null;
        $this->container['estimatedAvailabilityStatus'] = isset($data['estimatedAvailabilityStatus']) ? $data['estimatedAvailabilityStatus'] : null;
        $this->container['estimatedAvailableQuantity'] = isset($data['estimatedAvailableQuantity']) ? $data['estimatedAvailableQuantity'] : null;
        $this->container['estimatedSoldQuantity'] = isset($data['estimatedSoldQuantity']) ? $data['estimatedSoldQuantity'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets availabilityThreshold
     *
     * @return int|null
     */
    public function getAvailabilityThreshold()
    {
        return $this->container['availabilityThreshold'];
    }

    /**
     * Sets availabilityThreshold
     *
     * @param int|null $availabilityThreshold This field is return only when the seller sets their 'display item quantity' preference to Display &quot;More than 10 available&quot; in your listing (if applicable). The value of this field will be &quot;10&quot;, which is the threshold value. Code so that your app gracefully handles any future changes to this value.
     *
     * @return $this
     */
    public function setAvailabilityThreshold($availabilityThreshold)
    {
        $this->container['availabilityThreshold'] = $availabilityThreshold;

        return $this;
    }

    /**
     * Gets availabilityThresholdType
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\AvailabilityThresholdEnum|null
     */
    public function getAvailabilityThresholdType()
    {
        return $this->container['availabilityThresholdType'];
    }

    /**
     * Sets availabilityThresholdType
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\AvailabilityThresholdEnum|null $availabilityThresholdType availabilityThresholdType
     *
     * @return $this
     */
    public function setAvailabilityThresholdType($availabilityThresholdType)
    {
        $this->container['availabilityThresholdType'] = $availabilityThresholdType;

        return $this;
    }

    /**
     * Gets deliveryOptions
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\DeliveryOptionsEnum[]|null
     */
    public function getDeliveryOptions()
    {
        return $this->container['deliveryOptions'];
    }

    /**
     * Sets deliveryOptions
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\DeliveryOptionsEnum[]|null $deliveryOptions An array of available delivery options. Code so that your app gracefully handles any future changes to this list.
     *
     * @return $this
     */
    public function setDeliveryOptions($deliveryOptions)
    {
        $this->container['deliveryOptions'] = $deliveryOptions;

        return $this;
    }

    /**
     * Gets estimatedAvailabilityStatus
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\AvailabilityStatusEnum|null
     */
    public function getEstimatedAvailabilityStatus()
    {
        return $this->container['estimatedAvailabilityStatus'];
    }

    /**
     * Sets estimatedAvailabilityStatus
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\AvailabilityStatusEnum|null $estimatedAvailabilityStatus estimatedAvailabilityStatus
     *
     * @return $this
     */
    public function setEstimatedAvailabilityStatus($estimatedAvailabilityStatus)
    {
        $this->container['estimatedAvailabilityStatus'] = $estimatedAvailabilityStatus;

        return $this;
    }

    /**
     * Gets estimatedAvailableQuantity
     *
     * @return int|null
     */
    public function getEstimatedAvailableQuantity()
    {
        return $this->container['estimatedAvailableQuantity'];
    }

    /**
     * Sets estimatedAvailableQuantity
     *
     * @param int|null $estimatedAvailableQuantity The estimated number of this item that are available for purchase. Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. So instead of returning quantity, the estimated availability of the item is returned.
     *
     * @return $this
     */
    public function setEstimatedAvailableQuantity($estimatedAvailableQuantity)
    {
        $this->container['estimatedAvailableQuantity'] = $estimatedAvailableQuantity;

        return $this;
    }

    /**
     * Gets estimatedSoldQuantity
     *
     * @return int|null
     */
    public function getEstimatedSoldQuantity()
    {
        return $this->container['estimatedSoldQuantity'];
    }

    /**
     * Sets estimatedSoldQuantity
     *
     * @param int|null $estimatedSoldQuantity The estimated number of this item that have been sold.
     *
     * @return $this
     */
    public function setEstimatedSoldQuantity($estimatedSoldQuantity)
    {
        $this->container['estimatedSoldQuantity'] = $estimatedSoldQuantity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


