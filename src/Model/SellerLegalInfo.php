<?php
/**
 * SellerLegalInfo
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\browse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Browse API
 *
 * <p>The Browse API has the following resources:</p>   <ul> <li><b>item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters.</li>  <li> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#API\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <b>search_by_image: </b> Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters.</li>   <li><b>item: </b> Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size. This resource also provides a bridge between the eBay legacy APIs, such as <b>Trading</b> and <b>Finding</b>, and the RESTful APIs, such as <b>Browse</b>, which use different formats for the item IDs. You can use the <b>Browse</b> API to retrieve the basic details of the item and the RESTful item ID using a legacy item ID.</li>    <li><a href=\"https://developer.ebay.com/api-docs/static/versioning.html#API\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <b>shopping_cart: </b> Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp;<b>*Note:* </b> This resource is not available in the eBay API Explorer.</li></ul>       <p>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>. The <b>shopping_cart</b> resource calls require a <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">User access token</a>.</p>
 *
 * The version of the OpenAPI document: v1_beta.19.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\browse\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\browse\ObjectSerializer;

/**
 * SellerLegalInfo Class Doc Comment
 *
 * @category Class
 * @description The type that defines the fields for the contact information for a seller.
 * @package  macropage\SDKs\ebay\rest\browse
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SellerLegalInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SellerLegalInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'email' => 'string',
        'fax' => 'string',
        'imprint' => 'string',
        'legalContactFirstName' => 'string',
        'legalContactLastName' => 'string',
        'name' => 'string',
        'phone' => 'string',
        'registrationNumber' => 'string',
        'sellerProvidedLegalAddress' => '\macropage\SDKs\ebay\rest\browse\Model\LegalAddress',
        'termsOfService' => 'string',
        'vatDetails' => '\macropage\SDKs\ebay\rest\browse\Model\VatDetail[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'email' => null,
        'fax' => null,
        'imprint' => null,
        'legalContactFirstName' => null,
        'legalContactLastName' => null,
        'name' => null,
        'phone' => null,
        'registrationNumber' => null,
        'sellerProvidedLegalAddress' => null,
        'termsOfService' => null,
        'vatDetails' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email' => 'email',
        'fax' => 'fax',
        'imprint' => 'imprint',
        'legalContactFirstName' => 'legalContactFirstName',
        'legalContactLastName' => 'legalContactLastName',
        'name' => 'name',
        'phone' => 'phone',
        'registrationNumber' => 'registrationNumber',
        'sellerProvidedLegalAddress' => 'sellerProvidedLegalAddress',
        'termsOfService' => 'termsOfService',
        'vatDetails' => 'vatDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email' => 'setEmail',
        'fax' => 'setFax',
        'imprint' => 'setImprint',
        'legalContactFirstName' => 'setLegalContactFirstName',
        'legalContactLastName' => 'setLegalContactLastName',
        'name' => 'setName',
        'phone' => 'setPhone',
        'registrationNumber' => 'setRegistrationNumber',
        'sellerProvidedLegalAddress' => 'setSellerProvidedLegalAddress',
        'termsOfService' => 'setTermsOfService',
        'vatDetails' => 'setVatDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email' => 'getEmail',
        'fax' => 'getFax',
        'imprint' => 'getImprint',
        'legalContactFirstName' => 'getLegalContactFirstName',
        'legalContactLastName' => 'getLegalContactLastName',
        'name' => 'getName',
        'phone' => 'getPhone',
        'registrationNumber' => 'getRegistrationNumber',
        'sellerProvidedLegalAddress' => 'getSellerProvidedLegalAddress',
        'termsOfService' => 'getTermsOfService',
        'vatDetails' => 'getVatDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['imprint'] = isset($data['imprint']) ? $data['imprint'] : null;
        $this->container['legalContactFirstName'] = isset($data['legalContactFirstName']) ? $data['legalContactFirstName'] : null;
        $this->container['legalContactLastName'] = isset($data['legalContactLastName']) ? $data['legalContactLastName'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['registrationNumber'] = isset($data['registrationNumber']) ? $data['registrationNumber'] : null;
        $this->container['sellerProvidedLegalAddress'] = isset($data['sellerProvidedLegalAddress']) ? $data['sellerProvidedLegalAddress'] : null;
        $this->container['termsOfService'] = isset($data['termsOfService']) ? $data['termsOfService'] : null;
        $this->container['vatDetails'] = isset($data['vatDetails']) ? $data['vatDetails'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The seller's business email address.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string|null $fax The seller' business fax number.
     *
     * @return $this
     */
    public function setFax($fax)
    {
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets imprint
     *
     * @return string|null
     */
    public function getImprint()
    {
        return $this->container['imprint'];
    }

    /**
     * Sets imprint
     *
     * @param string|null $imprint This is a free-form string created by the seller. This is information often found on business cards, such as address. This is information used by some countries.
     *
     * @return $this
     */
    public function setImprint($imprint)
    {
        $this->container['imprint'] = $imprint;

        return $this;
    }

    /**
     * Gets legalContactFirstName
     *
     * @return string|null
     */
    public function getLegalContactFirstName()
    {
        return $this->container['legalContactFirstName'];
    }

    /**
     * Sets legalContactFirstName
     *
     * @param string|null $legalContactFirstName The seller's first name.
     *
     * @return $this
     */
    public function setLegalContactFirstName($legalContactFirstName)
    {
        $this->container['legalContactFirstName'] = $legalContactFirstName;

        return $this;
    }

    /**
     * Gets legalContactLastName
     *
     * @return string|null
     */
    public function getLegalContactLastName()
    {
        return $this->container['legalContactLastName'];
    }

    /**
     * Sets legalContactLastName
     *
     * @param string|null $legalContactLastName The seller's last name.
     *
     * @return $this
     */
    public function setLegalContactLastName($legalContactLastName)
    {
        $this->container['legalContactLastName'] = $legalContactLastName;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the seller's business.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone The seller's business phone number.
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets registrationNumber
     *
     * @return string|null
     */
    public function getRegistrationNumber()
    {
        return $this->container['registrationNumber'];
    }

    /**
     * Sets registrationNumber
     *
     * @param string|null $registrationNumber The seller's registration number. This is information used by some countries.
     *
     * @return $this
     */
    public function setRegistrationNumber($registrationNumber)
    {
        $this->container['registrationNumber'] = $registrationNumber;

        return $this;
    }

    /**
     * Gets sellerProvidedLegalAddress
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\LegalAddress|null
     */
    public function getSellerProvidedLegalAddress()
    {
        return $this->container['sellerProvidedLegalAddress'];
    }

    /**
     * Sets sellerProvidedLegalAddress
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\LegalAddress|null $sellerProvidedLegalAddress sellerProvidedLegalAddress
     *
     * @return $this
     */
    public function setSellerProvidedLegalAddress($sellerProvidedLegalAddress)
    {
        $this->container['sellerProvidedLegalAddress'] = $sellerProvidedLegalAddress;

        return $this;
    }

    /**
     * Gets termsOfService
     *
     * @return string|null
     */
    public function getTermsOfService()
    {
        return $this->container['termsOfService'];
    }

    /**
     * Sets termsOfService
     *
     * @param string|null $termsOfService This is a free-form string created by the seller. This is the seller's terms or condition, which is in addition to the seller's return policies.
     *
     * @return $this
     */
    public function setTermsOfService($termsOfService)
    {
        $this->container['termsOfService'] = $termsOfService;

        return $this;
    }

    /**
     * Gets vatDetails
     *
     * @return \macropage\SDKs\ebay\rest\browse\Model\VatDetail[]|null
     */
    public function getVatDetails()
    {
        return $this->container['vatDetails'];
    }

    /**
     * Sets vatDetails
     *
     * @param \macropage\SDKs\ebay\rest\browse\Model\VatDetail[]|null $vatDetails An array of the seller's VAT (value added tax) IDs and the issuing country. VAT is a tax added by some European countries.
     *
     * @return $this
     */
    public function setVatDetails($vatDetails)
    {
        $this->container['vatDetails'] = $vatDetails;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


